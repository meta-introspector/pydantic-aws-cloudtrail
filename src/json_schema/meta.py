# generated by datamodel-codegen:
#   filename:  <dict>

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Valid(BaseModel):
    title: str
    type: str


class Properties(BaseModel):
    valid: Valid


class Flag(BaseModel):
    properties: Properties
    required: List[str]
    title: str
    type: str


class Root(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties1(BaseModel):
    root: Root


class Hierarchical(BaseModel):
    properties: Properties1
    required: List[str]
    title: str
    type: str


class Details(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties2(BaseModel):
    valid: Valid
    details: Details


class ListModel(BaseModel):
    properties: Properties2
    required: List[str]
    title: str
    type: str


class EvaluationPath(BaseModel):
    title: str
    type: str


class SchemaLocation(BaseModel):
    format: str
    min_length: int = Field(..., alias='minLength')
    title: str
    type: str


class InstanceLocation(BaseModel):
    title: str
    type: str


class AnyOfItem(BaseModel):
    field_ref: Optional[str] = Field(None, alias='$ref')
    type: Optional[str] = None


class Details1(BaseModel):
    any_of: List[AnyOfItem] = Field(..., alias='anyOf')
    default: None


class AnyOfItem1(BaseModel):
    type: str


class Annotations(BaseModel):
    any_of: List[AnyOfItem1] = Field(..., alias='anyOf')
    default: None
    title: str


class DroppedAnnotations(BaseModel):
    any_of: List[AnyOfItem1] = Field(..., alias='anyOf')
    default: None
    title: str


class AdditionalProperties(BaseModel):
    type: str


class AnyOfItem3(BaseModel):
    additional_properties: Optional[AdditionalProperties] = Field(
        None, alias='additionalProperties'
    )
    type: str


class Errors(BaseModel):
    any_of: List[AnyOfItem3] = Field(..., alias='anyOf')
    default: None
    title: str


class Properties3(BaseModel):
    valid: Valid
    evaluation_path: EvaluationPath = Field(..., alias='evaluationPath')
    schema_location: SchemaLocation = Field(..., alias='schemaLocation')
    instance_location: InstanceLocation = Field(..., alias='instanceLocation')
    details: Details1
    annotations: Annotations
    dropped_annotations: DroppedAnnotations = Field(..., alias='droppedAnnotations')
    errors: Errors


class OutputUnit(BaseModel):
    properties: Properties3
    required: List[str]
    title: str
    type: str


class Items(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Root1(BaseModel):
    items: Items
    title: str
    type: str


class Properties4(BaseModel):
    root: Root1


class OutputUnitArray(BaseModel):
    properties: Properties4
    required: List[str]
    title: str
    type: str


class FieldDefs(BaseModel):
    flag: Flag = Field(..., alias='Flag')
    hierarchical: Hierarchical = Field(..., alias='Hierarchical')
    list_model: ListModel = Field(..., alias='ListModel')
    output_unit: OutputUnit = Field(..., alias='OutputUnit')
    output_unit_array: OutputUnitArray = Field(..., alias='OutputUnitArray')


class AnyOfItem4(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Root2(BaseModel):
    any_of: List[AnyOfItem4] = Field(..., alias='anyOf')
    description: str
    title: str


class Properties5(BaseModel):
    root: Root2


class Model(BaseModel):
    field_defs: FieldDefs = Field(..., alias='$defs')
    properties: Properties5
    required: List[str]
    title: str
    type: str
