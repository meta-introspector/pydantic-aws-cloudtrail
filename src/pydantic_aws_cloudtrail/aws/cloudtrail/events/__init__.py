# generated by datamodel-codegen:
# git+https://github.com/koxudaxi/datamodel-code-generator@5b895687ee01890f347b8f3af27417b48fe07bbd#egg=datamodel_code_generator
# git+https://github.com/pydantic/pydantic@3294b9fdd113d573ff3ee40ac7f389f56a1e0fba#egg=pydantic
#   filename:  

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Attributes(BaseModel):
    creation_date: str = Field(..., alias='creationDate')
    mfa_authenticated: str = Field(..., alias='mfaAuthenticated')


class SessionIssuer(BaseModel):
    type: Optional[str] = None
    principal_id: Optional[str] = Field(None, alias='principalId')
    arn: Optional[str] = None
    account_id: Optional[str] = Field(None, alias='accountId')
    user_name: Optional[str] = Field(None, alias='userName')


class WebIdFederationData(BaseModel):
    federated_provider: Optional[str] = Field(None, alias='federatedProvider')
    attributes: Optional[Dict[str, Any]] = None


class SessionContext(BaseModel):
    attributes: Attributes
    session_issuer: Optional[SessionIssuer] = Field(None, alias='sessionIssuer')
    web_id_federation_data: Optional[WebIdFederationData] = Field(
        None, alias='webIdFederationData'
    )
    ec2_role_delivery: Optional[str] = Field(None, alias='ec2RoleDelivery')


class UserIdentity(BaseModel):
    type: Optional[str] = None
    principal_id: Optional[str] = Field(None, alias='principalId')
    arn: Optional[str] = None
    account_id: Optional[str] = Field(None, alias='accountId')
    access_key_id: Optional[str] = Field(None, alias='accessKeyId')
    user_name: Optional[str] = Field(None, alias='userName')
    invoked_by: Optional[str] = Field(None, alias='invokedBy')
    session_context: Optional[SessionContext] = Field(None, alias='sessionContext')
    identity_provider: Optional[str] = Field(None, alias='identityProvider')


class Item(BaseModel):
    instance_id: Optional[str] = Field(None, alias='instanceId')
    min_count: Optional[int] = Field(None, alias='minCount')
    max_count: Optional[int] = Field(None, alias='maxCount')


class InstancesSet(BaseModel):
    items: Optional[List[Item]] = None


class Item2(BaseModel):
    value: str


class ValueSet(BaseModel):
    items: List[Item2]


class Item1(BaseModel):
    name: str
    value_set: ValueSet = Field(..., alias='valueSet')


class FilterSet(BaseModel):
    items: Optional[List[Item1]] = None


class Item3(BaseModel):
    volume_id: str = Field(..., alias='volumeId')


class VolumeSet(BaseModel):
    items: Optional[List[Item3]] = None


class DescribeCapacityReservationsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class Item4(BaseModel):
    group_id: str = Field(..., alias='groupId')


class SecurityGroupIdSet(BaseModel):
    items: Optional[List[Item4]] = None


class Item5(BaseModel):
    key_name: str = Field(..., alias='keyName')


class KeySet(BaseModel):
    items: Optional[List[Item5]] = None


class DescribeHostsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class Item6(BaseModel):
    owner: str


class OwnersSet(BaseModel):
    items: Optional[List[Item6]] = None


class LaunchTemplateId(BaseModel):
    tag: int
    content: str


class LaunchTemplateName(BaseModel):
    tag: int
    content: str


class DescribeLaunchTemplatesRequest(BaseModel):
    max_results: Optional[int] = Field(None, alias='MaxResults')
    launch_template_id: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    launch_template_name: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )


class EncryptionContext(BaseModel):
    aws_s3_arn: Optional[str] = Field(None, alias='aws:s3:arn')
    aws_logs_arn: Optional[str] = Field(None, alias='aws:logs:arn')
    parameter_arn: Optional[str] = Field(None, alias='PARAMETER_ARN')
    aws_ebs_id: Optional[str] = Field(None, alias='aws:ebs:id')
    aws_ssm_target_id: Optional[str] = Field(None, alias='aws:ssm:TargetId')
    aws_ssm_session_id: Optional[str] = Field(None, alias='aws:ssm:SessionId')


class DescribeFleetsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class ExecutionResult(BaseModel):
    execution_date: str = Field(..., alias='executionDate')
    status: str
    execution_summary: str = Field(..., alias='executionSummary')
    error_code: str = Field(..., alias='errorCode')


class ExecutionSummary(BaseModel):
    execution_time: str = Field(..., alias='executionTime')
    execution_id: str = Field(..., alias='executionId')
    execution_type: str = Field(..., alias='executionType')


class Details(BaseModel):
    document_version: str = Field(..., alias='DocumentVersion')
    document_name: str = Field(..., alias='DocumentName')


class Item7(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    severity: Optional[str] = None
    status: Optional[str] = None
    details: Optional[Details] = None
    type_name: Optional[str] = Field(None, alias='typeName')
    schema_version: Optional[str] = Field(None, alias='schemaVersion')
    capture_time: Optional[str] = Field(None, alias='captureTime')
    content_hash: Optional[str] = Field(None, alias='contentHash')


class DescribeTransitGatewayPolicyTablesRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class Item8(BaseModel):
    route_table_id: str = Field(..., alias='routeTableId')


class RouteTableIdSet(BaseModel):
    items: Optional[List[Item8]] = None


class Item9(BaseModel):
    network_acl_id: str = Field(..., alias='networkAclId')


class NetworkAclIdSet(BaseModel):
    items: Optional[List[Item9]] = None


class Item10(BaseModel):
    vpc_id: str = Field(..., alias='vpcId')


class VpcSet(BaseModel):
    items: Optional[List[Item10]] = None


class Item11(BaseModel):
    subnet_id: str = Field(..., alias='subnetId')


class SubnetSet(BaseModel):
    items: Optional[List[Item11]] = None


class Includes(BaseModel):
    has_dns_fqdn: bool = Field(..., alias='hasDnsFqdn')
    key_types: List[str] = Field(..., alias='keyTypes')


class Item12(BaseModel):
    internet_gateway_id: str = Field(..., alias='internetGatewayId')


class InternetGatewayIdSet(BaseModel):
    items: Optional[List[Item12]] = None


class Item13(BaseModel):
    network_interface_id: str = Field(..., alias='networkInterfaceId')


class NetworkInterfaceIdSet(BaseModel):
    items: Optional[List[Item13]] = None


class Dimension(BaseModel):
    name: str
    value: str


class Filter(BaseModel):
    key: Optional[str] = None
    values: Optional[List[str]] = None
    value: Optional[str] = None
    name: Optional[str] = None


class Item14(BaseModel):
    image_id: str = Field(..., alias='imageId')


class ImagesSet(BaseModel):
    items: Optional[List[Item14]] = None


class Value(BaseModel):
    tag: int
    content: str


class Filter1(BaseModel):
    value: Value = Field(..., alias='Value')
    tag: int
    name: str = Field(..., alias='Name')


class DescribeReplaceRootVolumeTasksRequest(BaseModel):
    filter: Filter1 = Field(..., alias='Filter')
    max_results: int = Field(..., alias='MaxResults')


class InstanceId(BaseModel):
    tag: int
    content: str


class DescribeInstanceCreditSpecificationsRequest(BaseModel):
    instance_id: InstanceId = Field(..., alias='InstanceId')


class DescribeInstanceImageMetadataRequest(BaseModel):
    instance_id: InstanceId = Field(..., alias='InstanceId')


class InstanceType(BaseModel):
    tag: int
    content: str


class InstanceTypeItem(BaseModel):
    tag: int
    content: str


class DescribeInstanceTypesRequest(BaseModel):
    instance_type: Optional[Union[InstanceType, List[InstanceTypeItem]]] = Field(
        None, alias='InstanceType'
    )
    max_results: Optional[int] = Field(None, alias='MaxResults')
    next_token: Optional[str] = Field(None, alias='NextToken')


class Target(BaseModel):
    id: Optional[str] = None
    key: Optional[str] = None
    values: Optional[List[str]] = None


class LaunchTemplateVersion(BaseModel):
    tag: int
    content: Union[int, str]


class LaunchTemplateVersionItem(BaseModel):
    tag: int
    content: str


class DescribeLaunchTemplateVersionsRequest(BaseModel):
    launch_template_version: Optional[
        Union[LaunchTemplateVersion, List[LaunchTemplateVersionItem]]
    ] = Field(None, alias='LaunchTemplateVersion')
    launch_template_id: str = Field(..., alias='LaunchTemplateId')
    max_results: Optional[int] = Field(None, alias='MaxResults')


class Monitoring(BaseModel):
    enabled: bool


class Item15(BaseModel):
    device_index: int = Field(..., alias='deviceIndex')
    subnet_id: str = Field(..., alias='subnetId')
    network_card_index: int = Field(..., alias='networkCardIndex')


class NetworkInterfaceSet(BaseModel):
    items: List[Item15]


class Tag(BaseModel):
    key: str
    value: str


class Item16(BaseModel):
    resource_type: str = Field(..., alias='resourceType')
    tags: List[Tag]


class TagSpecificationSet(BaseModel):
    items: List[Item16]


class LaunchTemplate(BaseModel):
    launch_template_id: str = Field(..., alias='launchTemplateId')
    version: str


class EncryptionContextSubset(BaseModel):
    aws_ebs_id: str = Field(..., alias='aws:ebs:id')


class Constraints(BaseModel):
    encryption_context_subset: EncryptionContextSubset = Field(
        ..., alias='encryptionContextSubset'
    )


class Preferences(BaseModel):
    min_healthy_percentage: int = Field(..., alias='minHealthyPercentage')
    skip_matching: bool = Field(..., alias='skipMatching')
    max_healthy_percentage: int = Field(..., alias='maxHealthyPercentage')
    auto_rollback: bool = Field(..., alias='autoRollback')
    scale_in_protected_instances: str = Field(..., alias='scaleInProtectedInstances')
    standby_instances: str = Field(..., alias='standbyInstances')


class DescribeInstanceConnectEndpointsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class Filters1Item(BaseModel):
    key: str = Field(..., alias='Key')
    values: List[str] = Field(..., alias='Values')


class Filter2(BaseModel):
    value: Value = Field(..., alias='Value')
    tag: int
    name: str = Field(..., alias='Name')


class DescribeSecurityGroupRulesRequest(BaseModel):
    filter: Filter2 = Field(..., alias='Filter')
    max_results: Optional[int] = Field(None, alias='MaxResults')


class ParameterFilter(BaseModel):
    key: str
    option: Optional[str] = None
    values: List[str]


class CloudWatchOutputConfig(BaseModel):
    cloud_watch_log_group_name: str = Field(..., alias='cloudWatchLogGroupName')
    cloud_watch_output_enabled: bool = Field(..., alias='cloudWatchOutputEnabled')


class Ebs(BaseModel):
    volume_type: str = Field(..., alias='VolumeType')
    encrypted: bool = Field(..., alias='Encrypted')
    volume_size: int = Field(..., alias='VolumeSize')


class BlockDeviceMapping(BaseModel):
    ebs: Ebs = Field(..., alias='Ebs')
    tag: int
    device_name: str = Field(..., alias='DeviceName')


class SecurityGroupId(BaseModel):
    tag: int
    content: str


class NetworkInterface(BaseModel):
    device_index: int = Field(..., alias='DeviceIndex')
    security_group_id: SecurityGroupId = Field(..., alias='SecurityGroupId')
    tag: int
    associate_public_ip_address: bool = Field(..., alias='AssociatePublicIpAddress')
    network_card_index: int = Field(..., alias='NetworkCardIndex')
    delete_on_termination: bool = Field(..., alias='DeleteOnTermination')


class IamInstanceProfile(BaseModel):
    name: str = Field(..., alias='Name')


class LaunchTemplateData(BaseModel):
    key_name: str = Field(..., alias='KeyName')
    user_data: str = Field(..., alias='UserData')
    image_id: str = Field(..., alias='ImageId')
    block_device_mapping: BlockDeviceMapping = Field(..., alias='BlockDeviceMapping')
    network_interface: NetworkInterface = Field(..., alias='NetworkInterface')
    iam_instance_profile: IamInstanceProfile = Field(..., alias='IamInstanceProfile')
    instance_type: str = Field(..., alias='InstanceType')


class CreateLaunchTemplateVersionRequest(BaseModel):
    launch_template_data: LaunchTemplateData = Field(..., alias='LaunchTemplateData')
    launch_template_id: str = Field(..., alias='LaunchTemplateId')
    client_token: str = Field(..., alias='ClientToken')


class DescribeSpotFleetRequestsRequest(BaseModel):
    next_token: str = Field(..., alias='NextToken')
    max_results: int = Field(..., alias='MaxResults')


class ArchitectureType(BaseModel):
    tag: int
    content: str


class VirtualizationType(BaseModel):
    tag: int
    content: str


class VCpuCount(BaseModel):
    min: str = Field(..., alias='Min')


class MemoryMiB(BaseModel):
    min: str = Field(..., alias='Min')


class InstanceRequirements(BaseModel):
    v_cpu_count: VCpuCount = Field(..., alias='VCpuCount')
    memory_mi_b: MemoryMiB = Field(..., alias='MemoryMiB')


class GetInstanceTypesFromInstanceRequirementsRequest(BaseModel):
    architecture_type: ArchitectureType = Field(..., alias='ArchitectureType')
    virtualization_type: VirtualizationType = Field(..., alias='VirtualizationType')
    instance_requirements: InstanceRequirements = Field(
        ..., alias='InstanceRequirements'
    )


class Filter3(BaseModel):
    value: Value = Field(..., alias='Value')
    tag: int
    name: str = Field(..., alias='Name')


class GetSecurityGroupsForVpcRequest(BaseModel):
    vpc_id: str = Field(..., alias='VpcId')
    filter: Filter3 = Field(..., alias='Filter')
    max_results: int = Field(..., alias='MaxResults')


class ValueItem(BaseModel):
    tag: int
    content: str


class Filter4(BaseModel):
    value: List[ValueItem] = Field(..., alias='Value')
    tag: int
    name: str = Field(..., alias='Name')


class DescribeTransitGatewayAttachmentsRequest(BaseModel):
    filter: Filter4 = Field(..., alias='Filter')
    max_results: int = Field(..., alias='MaxResults')


class DescribeTransitGatewayConnectPeersRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class ResultAttribute(BaseModel):
    type_name: str = Field(..., alias='typeName')


class FiltersWithOperatorItem(BaseModel):
    key: str
    values: List[str]
    operator: str


class Item17(BaseModel):
    resource_id: str = Field(..., alias='resourceId')


class ResourcesSet(BaseModel):
    items: List[Item17]


class Item18(BaseModel):
    key: str
    value: str


class TagSet(BaseModel):
    items: List[Item18]


class DeleteLaunchTemplateRequest(BaseModel):
    launch_template_id: str = Field(..., alias='LaunchTemplateId')


class BlockDeviceMapping1(BaseModel):
    ebs: Ebs = Field(..., alias='Ebs')
    tag: int
    device_name: str = Field(..., alias='DeviceName')


class NetworkInterface1(BaseModel):
    device_index: int = Field(..., alias='DeviceIndex')
    security_group_id: SecurityGroupId = Field(..., alias='SecurityGroupId')
    tag: int
    associate_public_ip_address: bool = Field(..., alias='AssociatePublicIpAddress')
    network_card_index: int = Field(..., alias='NetworkCardIndex')
    delete_on_termination: bool = Field(..., alias='DeleteOnTermination')


class LaunchTemplateData1(BaseModel):
    key_name: str = Field(..., alias='KeyName')
    user_data: str = Field(..., alias='UserData')
    image_id: str = Field(..., alias='ImageId')
    block_device_mapping: BlockDeviceMapping1 = Field(..., alias='BlockDeviceMapping')
    network_interface: NetworkInterface1 = Field(..., alias='NetworkInterface')
    iam_instance_profile: IamInstanceProfile = Field(..., alias='IamInstanceProfile')
    instance_type: str = Field(..., alias='InstanceType')


class Tag1(BaseModel):
    value: str = Field(..., alias='Value')
    tag: int
    key: str = Field(..., alias='Key')


class TagSpecification(BaseModel):
    resource_type: str = Field(..., alias='ResourceType')
    tag: int
    tag_1: Tag1 = Field(..., alias='Tag')


class CreateLaunchTemplateRequest(BaseModel):
    launch_template_name: str = Field(..., alias='LaunchTemplateName')
    launch_template_data: LaunchTemplateData1 = Field(..., alias='LaunchTemplateData')
    client_token: str = Field(..., alias='ClientToken')
    tag_specification: TagSpecification = Field(..., alias='TagSpecification')


class TagFilter(BaseModel):
    key: str


class DescribeCapacityReservationFleetsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class LookupAttribute(BaseModel):
    attribute_key: str = Field(..., alias='attributeKey')
    attribute_value: str = Field(..., alias='attributeValue')


class DescribeVpcEndpointsRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class DescribeNetworkInsightsAccessScopesRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class Tags(BaseModel):
    project: str


class Tag2(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None
    tag_key: Optional[str] = Field(None, alias='tagKey')
    tag_value: Optional[str] = Field(None, alias='tagValue')


class ApplyServerSideEncryptionByDefault(BaseModel):
    sse_algorithm: str = Field(..., alias='SSEAlgorithm')
    kms_master_key_id: str = Field(..., alias='KMSMasterKeyID')


class Rule(BaseModel):
    bucket_key_enabled: bool = Field(..., alias='BucketKeyEnabled')
    apply_server_side_encryption_by_default: ApplyServerSideEncryptionByDefault = Field(
        ..., alias='ApplyServerSideEncryptionByDefault'
    )


class ServerSideEncryptionConfiguration(BaseModel):
    xmlns: str
    rule: Rule = Field(..., alias='Rule')


class Tag3(BaseModel):
    value: str = Field(..., alias='Value')
    key: str = Field(..., alias='Key')


class TagSet1(BaseModel):
    tag: Tag3 = Field(..., alias='Tag')


class Tagging1(BaseModel):
    xmlns: str
    tag_set: TagSet1 = Field(..., alias='TagSet')


class DescribeTrafficMirrorFiltersRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class DescribeAddressesAttributeRequest(BaseModel):
    attribute: str = Field(..., alias='Attribute')
    max_results: int = Field(..., alias='MaxResults')


class DescribeNatGatewaysRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class DescribeAddressTransfersRequest(BaseModel):
    max_results: int = Field(..., alias='MaxResults')


class DescribeInstanceTypeOfferingsRequest(BaseModel):
    next_token: Optional[str] = Field(None, alias='NextToken')
    location_type: str = Field(..., alias='LocationType')


class RequestParameters(BaseModel):
    start_time: Optional[Union[int, str]] = Field(None, alias='startTime')
    next_token: Optional[str] = Field(None, alias='nextToken')
    role_arn: Optional[str] = Field(None, alias='roleArn')
    role_session_name: Optional[str] = Field(None, alias='roleSessionName')
    duration_seconds: Optional[int] = Field(None, alias='durationSeconds')
    instances_set: Optional[InstancesSet] = Field(None, alias='instancesSet')
    filter_set: Optional[FilterSet] = Field(None, alias='filterSet')
    include_all_instances: Optional[bool] = Field(None, alias='includeAllInstances')
    type: Optional[str] = Field(None, alias='Type')
    state_value: Optional[str] = Field(None, alias='stateValue')
    max_records: Optional[int] = Field(None, alias='maxRecords')
    page_size: Optional[int] = Field(None, alias='pageSize')
    volume_set: Optional[VolumeSet] = Field(None, alias='volumeSet')
    max_results: Optional[Union[int, str]] = Field(None, alias='maxResults')
    describe_capacity_reservations_request: Optional[
        DescribeCapacityReservationsRequest
    ] = Field(None, alias='DescribeCapacityReservationsRequest')
    security_group_set: Optional[Dict[str, Any]] = Field(None, alias='securityGroupSet')
    security_group_id_set: Optional[SecurityGroupIdSet] = Field(
        None, alias='securityGroupIdSet'
    )
    account_attribute_name_set: Optional[Dict[str, Any]] = Field(
        None, alias='accountAttributeNameSet'
    )
    availability_zone_set: Optional[Dict[str, Any]] = Field(
        None, alias='availabilityZoneSet'
    )
    availability_zone_id_set: Optional[Dict[str, Any]] = Field(
        None, alias='availabilityZoneIdSet'
    )
    placement_group_set: Optional[Dict[str, Any]] = Field(
        None, alias='placementGroupSet'
    )
    placement_group_id_set: Optional[Dict[str, Any]] = Field(
        None, alias='placementGroupIdSet'
    )
    key_set: Optional[KeySet] = Field(None, alias='keySet')
    key_pair_id_set: Optional[Dict[str, Any]] = Field(None, alias='keyPairIdSet')
    include_public_key: Optional[bool] = Field(None, alias='includePublicKey')
    public_ips_set: Optional[Dict[str, Any]] = Field(None, alias='publicIpsSet')
    allocation_ids_set: Optional[Dict[str, Any]] = Field(None, alias='allocationIdsSet')
    describe_hosts_request: Optional[DescribeHostsRequest] = Field(
        None, alias='DescribeHostsRequest'
    )
    snapshot_set: Optional[Dict[str, Any]] = Field(None, alias='snapshotSet')
    owners_set: Optional[OwnersSet] = Field(None, alias='ownersSet')
    shared_users_set: Optional[Dict[str, Any]] = Field(None, alias='sharedUsersSet')
    describe_launch_templates_request: Optional[
        Union[str, DescribeLaunchTemplatesRequest]
    ] = Field(None, alias='DescribeLaunchTemplatesRequest')
    region_set: Optional[Dict[str, Any]] = Field(None, alias='regionSet')
    all_regions: Optional[bool] = Field(None, alias='allRegions')
    key_id: Optional[str] = Field(None, alias='keyId')
    key_spec: Optional[str] = Field(None, alias='keySpec')
    encryption_context: Optional[EncryptionContext] = Field(
        None, alias='encryptionContext'
    )
    instance_id: Optional[str] = Field(None, alias='instanceId')
    agent_version: Optional[str] = Field(None, alias='agentVersion')
    agent_status: Optional[str] = Field(None, alias='agentStatus')
    platform_type: Optional[str] = Field(None, alias='platformType')
    platform_name: Optional[str] = Field(None, alias='platformName')
    platform_version: Optional[str] = Field(None, alias='platformVersion')
    i_p_address: Optional[str] = Field(None, alias='iPAddress')
    computer_name: Optional[str] = Field(None, alias='computerName')
    agent_name: Optional[str] = Field(None, alias='agentName')
    availability_zone: Optional[str] = Field(None, alias='availabilityZone')
    availability_zone_id: Optional[str] = Field(None, alias='availabilityZoneId')
    s_sm_connection_channel: Optional[str] = Field(None, alias='sSMConnectionChannel')
    encryption_algorithm: Optional[str] = Field(None, alias='encryptionAlgorithm')
    query_id: Optional[str] = Field(None, alias='queryId')
    dry_run: Optional[bool] = Field(None, alias='dryRun')
    query_language: Optional[str] = Field(None, alias='queryLanguage')
    log_group_name: Optional[str] = Field(None, alias='logGroupName')
    end_time: Optional[Union[int, str]] = Field(None, alias='endTime')
    query_string: Optional[str] = Field(None, alias='queryString')
    describe_fleets_request: Optional[DescribeFleetsRequest] = Field(
        None, alias='DescribeFleetsRequest'
    )
    association_id: Optional[str] = Field(None, alias='associationId')
    execution_result: Optional[ExecutionResult] = Field(None, alias='executionResult')
    resource_id: Optional[str] = Field(None, alias='resourceId')
    resource_type: Optional[str] = Field(None, alias='resourceType')
    compliance_type: Optional[str] = Field(None, alias='complianceType')
    execution_summary: Optional[ExecutionSummary] = Field(
        None, alias='executionSummary'
    )
    items: Optional[List[Item7]] = None
    item_content_hash: Optional[str] = Field(None, alias='itemContentHash')
    policy: Optional[str] = None
    host: Optional[str] = Field(None, alias='Host')
    marker: Optional[str] = None
    load_balancer_arn: Optional[str] = Field(None, alias='loadBalancerArn')
    aws_account_id: Optional[str] = Field(None, alias='awsAccountId')
    describe_flow_logs_request: Optional[str] = Field(
        None, alias='DescribeFlowLogsRequest'
    )
    describe_transit_gateway_policy_tables_request: Optional[
        DescribeTransitGatewayPolicyTablesRequest
    ] = Field(None, alias='DescribeTransitGatewayPolicyTablesRequest')
    stack_status_filter: Optional[List[str]] = Field(None, alias='stackStatusFilter')
    route_table_id_set: Optional[RouteTableIdSet] = Field(None, alias='routeTableIdSet')
    network_acl_id_set: Optional[NetworkAclIdSet] = Field(None, alias='networkAclIdSet')
    vpc_set: Optional[VpcSet] = Field(None, alias='vpcSet')
    vpn_connection_set: Optional[Dict[str, Any]] = Field(None, alias='vpnConnectionSet')
    subnet_set: Optional[SubnetSet] = Field(None, alias='subnetSet')
    vpn_gateway_set: Optional[Dict[str, Any]] = Field(None, alias='vpnGatewaySet')
    customer_gateway_set: Optional[Dict[str, Any]] = Field(
        None, alias='customerGatewaySet'
    )
    certificate_arn: Optional[str] = Field(None, alias='certificateArn')
    includes: Optional[Includes] = None
    internet_gateway_id_set: Optional[InternetGatewayIdSet] = Field(
        None, alias='internetGatewayIdSet'
    )
    network_interface_id_set: Optional[NetworkInterfaceIdSet] = Field(
        None, alias='networkInterfaceIdSet'
    )
    alarm_names: Optional[List[str]] = Field(None, alias='alarmNames')
    alarm_types: Optional[List[str]] = Field(None, alias='alarmTypes')
    exclude_autoscaling_alarms: Optional[bool] = Field(
        None, alias='excludeAutoscalingAlarms'
    )
    exclude_managed_alarms: Optional[bool] = Field(None, alias='excludeManagedAlarms')
    limit: Optional[int] = None
    alarm_name: Optional[str] = Field(None, alias='alarmName')
    alarm_description: Optional[str] = Field(None, alias='alarmDescription')
    actions_enabled: Optional[bool] = Field(None, alias='actionsEnabled')
    alarm_actions: Optional[List[str]] = Field(None, alias='alarmActions')
    metric_name: Optional[str] = Field(None, alias='metricName')
    namespace: Optional[str] = None
    statistic: Optional[str] = None
    dimensions: Optional[List[Dimension]] = None
    period: Optional[int] = None
    evaluation_periods: Optional[int] = Field(None, alias='evaluationPeriods')
    threshold: Optional[float] = None
    comparison_operator: Optional[str] = Field(None, alias='comparisonOperator')
    instance_arns: Optional[List[str]] = Field(None, alias='instanceArns')
    account_ids: Optional[List[str]] = Field(None, alias='accountIds')
    filters: Optional[List[Filter]] = None
    executable_by_set: Optional[Dict[str, Any]] = Field(None, alias='executableBySet')
    images_set: Optional[ImagesSet] = Field(None, alias='imagesSet')
    describe_replace_root_volume_tasks_request: Optional[
        DescribeReplaceRootVolumeTasksRequest
    ] = Field(None, alias='DescribeReplaceRootVolumeTasksRequest')
    describe_instance_credit_specifications_request: Optional[
        DescribeInstanceCreditSpecificationsRequest
    ] = Field(None, alias='DescribeInstanceCreditSpecificationsRequest')
    attribute: Optional[str] = None
    describe_instance_image_metadata_request: Optional[
        DescribeInstanceImageMetadataRequest
    ] = Field(None, alias='DescribeInstanceImageMetadataRequest')
    describe_instance_types_request: Optional[
        Union[str, DescribeInstanceTypesRequest]
    ] = Field(None, alias='DescribeInstanceTypesRequest')
    log_stream_name: Optional[str] = Field(None, alias='logStreamName')
    start_from_head: Optional[bool] = Field(None, alias='startFromHead')
    unmask: Optional[bool] = None
    order_by: Optional[str] = Field(None, alias='orderBy')
    descending: Optional[bool] = None
    filter_expired_log_streams: Optional[bool] = Field(
        None, alias='filterExpiredLogStreams'
    )
    log_group_identifiers: Optional[List[str]] = Field(
        None, alias='logGroupIdentifiers'
    )
    log_group_identifier: Optional[str] = Field(None, alias='logGroupIdentifier')
    account_id: Optional[str] = Field(None, alias='accountId')
    log_group_name_prefix: Optional[str] = Field(None, alias='logGroupNamePrefix')
    show_subscription_destinations: Optional[bool] = Field(
        None, alias='showSubscriptionDestinations'
    )
    policy_type: Optional[str] = Field(None, alias='policyType')
    account_identifiers: Optional[List[str]] = Field(None, alias='accountIdentifiers')
    visibility: Optional[str] = None
    active_only: Optional[bool] = Field(None, alias='activeOnly')
    auto_scaling_group_name: Optional[str] = Field(None, alias='autoScalingGroupName')
    auto_scaling_group_names: Optional[List[str]] = Field(
        None, alias='autoScalingGroupNames'
    )
    target_group_arn: Optional[str] = Field(None, alias='targetGroupArn')
    targets: Optional[List[Target]] = None
    describe_launch_template_versions_request: Optional[
        DescribeLaunchTemplateVersionsRequest
    ] = Field(None, alias='DescribeLaunchTemplateVersionsRequest')
    name: Optional[str] = None
    document_version: Optional[str] = Field(None, alias='documentVersion')
    allow_invalid_content: Optional[bool] = Field(None, alias='allowInvalidContent')
    dashboard_name: Optional[str] = Field(None, alias='dashboardName')
    with_decryption: Optional[bool] = Field(None, alias='withDecryption')
    instance_ids: Optional[List[str]] = Field(None, alias='instanceIds')
    document_name: Optional[str] = Field(None, alias='documentName')
    timeout_seconds: Optional[int] = Field(None, alias='timeoutSeconds')
    comment: Optional[str] = None
    max_concurrency: Optional[str] = Field(None, alias='maxConcurrency')
    max_errors: Optional[str] = Field(None, alias='maxErrors')
    client_name: Optional[str] = Field(None, alias='clientName')
    interactive: Optional[bool] = None
    public_key: Optional[str] = Field(None, alias='publicKey')
    public_key_type: Optional[str] = Field(None, alias='publicKeyType')
    fingerprint: Optional[str] = None
    number_of_bytes: Optional[int] = Field(None, alias='numberOfBytes')
    block_device_mapping: Optional[Dict[str, Any]] = Field(
        None, alias='blockDeviceMapping'
    )
    monitoring: Optional[Monitoring] = None
    disable_api_termination: Optional[bool] = Field(None, alias='disableApiTermination')
    disable_api_stop: Optional[bool] = Field(None, alias='disableApiStop')
    client_token: Optional[str] = Field(None, alias='clientToken')
    network_interface_set: Optional[NetworkInterfaceSet] = Field(
        None, alias='networkInterfaceSet'
    )
    tag_specification_set: Optional[TagSpecificationSet] = Field(
        None, alias='tagSpecificationSet'
    )
    launch_template: Optional[LaunchTemplate] = Field(None, alias='launchTemplate')
    operations: Optional[List[str]] = None
    grantee_principal: Optional[str] = Field(None, alias='granteePrincipal')
    retiring_principal: Optional[str] = Field(None, alias='retiringPrincipal')
    constraints: Optional[Constraints] = None
    target_group_arns: Optional[List[str]] = Field(None, alias='targetGroupArns')
    preferences: Optional[Preferences] = None
    by_shared: Optional[bool] = Field(None, alias='byShared')
    log_stream_name_prefix: Optional[str] = Field(None, alias='logStreamNamePrefix')
    state: Optional[str] = None
    bucket_name: Optional[str] = Field(None, alias='bucketName')
    encryption: Optional[str] = None
    message_schema_version: Optional[str] = Field(None, alias='messageSchemaVersion')
    request_id: Optional[str] = Field(None, alias='requestId')
    session_id: Optional[str] = Field(None, alias='sessionId')
    client_id: Optional[str] = Field(None, alias='clientId')
    require_acknowledgement: Optional[bool] = Field(
        None, alias='requireAcknowledgement'
    )
    client_instance_id: Optional[str] = Field(None, alias='clientInstanceId')
    target: Optional[str] = None
    describe_instance_connect_endpoints_request: Optional[
        DescribeInstanceConnectEndpointsRequest
    ] = Field(None, alias='DescribeInstanceConnectEndpointsRequest')
    filters_1: Optional[List[Filters1Item]] = Field(None, alias='Filters')
    max_items: Optional[int] = Field(None, alias='MaxItems')
    log_group_names: Optional[List[str]] = Field(None, alias='logGroupNames')
    log_group_arn_list: Optional[List[str]] = Field(None, alias='logGroupArnList')
    detector_name: Optional[str] = Field(None, alias='detectorName')
    evaluation_frequency: Optional[str] = Field(None, alias='evaluationFrequency')
    anomaly_visibility_time: Optional[int] = Field(None, alias='anomalyVisibilityTime')
    filter_pattern: Optional[str] = Field(None, alias='filterPattern')
    status: Optional[str] = None
    lifecycle: Optional[str] = None
    versioning: Optional[str] = None
    policy_names: Optional[List[str]] = Field(None, alias='policyNames')
    listener_arns: Optional[List[str]] = Field(None, alias='listenerArns')
    resource_arns: Optional[List[str]] = Field(None, alias='resourceArns')
    describe_security_group_rules_request: Optional[
        DescribeSecurityGroupRulesRequest
    ] = Field(None, alias='DescribeSecurityGroupRulesRequest')
    traffic_source_type: Optional[str] = Field(None, alias='trafficSourceType')
    document_format: Optional[str] = Field(None, alias='documentFormat')
    load_balancer_arns: Optional[List[str]] = Field(None, alias='loadBalancerArns')
    permission_type: Optional[str] = Field(None, alias='permissionType')
    listener_arn: Optional[str] = Field(None, alias='listenerArn')
    action_prefix: Optional[str] = Field(None, alias='actionPrefix')
    rule_arns: Optional[List[str]] = Field(None, alias='ruleArns')
    logging: Optional[str] = None
    tagging: Optional[str] = None
    resource_arn: Optional[str] = Field(None, alias='resourceArn')
    policy_name: Optional[str] = Field(None, alias='policyName')
    baseline_id: Optional[str] = Field(None, alias='baselineId')
    public_access_block: Optional[str] = Field(None, alias='publicAccessBlock')
    object_lock: Optional[str] = Field(None, alias='object-lock')
    replication: Optional[str] = None
    request_payment: Optional[str] = Field(None, alias='requestPayment')
    window_id: Optional[str] = Field(None, alias='windowId')
    vpc_id: Optional[str] = Field(None, alias='vpcId')
    resource_arn_1: Optional[str] = Field(None, alias='resourceARN')
    accelerate: Optional[str] = None
    website: Optional[str] = None
    topic_arn: Optional[str] = Field(None, alias='topicArn')
    rule: Optional[str] = None
    event_bus_name: Optional[str] = Field(None, alias='eventBusName')
    window_task_id: Optional[str] = Field(None, alias='windowTaskId')
    cors: Optional[str] = None
    acl: Optional[str] = None
    parameter_filters: Optional[List[ParameterFilter]] = Field(
        None, alias='parameterFilters'
    )
    parameters: Optional[Union[Dict[str, Any], str]] = None
    output_s3_bucket_name: Optional[str] = Field(None, alias='outputS3BucketName')
    cloud_watch_output_config: Optional[CloudWatchOutputConfig] = Field(
        None, alias='cloudWatchOutputConfig'
    )
    command_id: Optional[str] = Field(None, alias='commandId')
    details: Optional[bool] = None
    max_results_1: Optional[Union[int, str]] = Field(None, alias='MaxResults')
    create_launch_template_version_request: Optional[
        CreateLaunchTemplateVersionRequest
    ] = Field(None, alias='CreateLaunchTemplateVersionRequest')
    policy_types: Optional[List[str]] = Field(None, alias='policyTypes')
    describe_spot_fleet_requests_request: Optional[
        DescribeSpotFleetRequestsRequest
    ] = Field(None, alias='DescribeSpotFleetRequestsRequest')
    spot_instance_request_id_set: Optional[Dict[str, Any]] = Field(
        None, alias='spotInstanceRequestIdSet'
    )
    instance_type_set: Optional[Dict[str, Any]] = Field(None, alias='instanceTypeSet')
    product_description_set: Optional[Dict[str, Any]] = Field(
        None, alias='productDescriptionSet'
    )
    get_instance_types_from_instance_requirements_request: Optional[
        GetInstanceTypesFromInstanceRequirementsRequest
    ] = Field(None, alias='GetInstanceTypesFromInstanceRequirementsRequest')
    get_allowed_images_settings_request: Optional[str] = Field(
        None, alias='GetAllowedImagesSettingsRequest'
    )
    get_security_groups_for_vpc_request: Optional[
        GetSecurityGroupsForVpcRequest
    ] = Field(None, alias='GetSecurityGroupsForVpcRequest')
    describe_transit_gateway_attachments_request: Optional[
        DescribeTransitGatewayAttachmentsRequest
    ] = Field(None, alias='DescribeTransitGatewayAttachmentsRequest')
    notification: Optional[str] = None
    location: Optional[str] = None
    describe_transit_gateway_connect_peers_request: Optional[
        DescribeTransitGatewayConnectPeersRequest
    ] = Field(None, alias='DescribeTransitGatewayConnectPeersRequest')
    value: Optional[str] = None
    type_1: Optional[str] = Field(None, alias='type')
    overwrite: Optional[bool] = None
    allowed_pattern: Optional[str] = Field(None, alias='allowedPattern')
    tier: Optional[str] = None
    result_attributes: Optional[List[ResultAttribute]] = Field(
        None, alias='resultAttributes'
    )
    filters_with_operator: Optional[List[FiltersWithOperatorItem]] = Field(
        None, alias='filtersWithOperator'
    )
    plugin_name: Optional[str] = Field(None, alias='pluginName')
    include_public: Optional[bool] = Field(None, alias='includePublic')
    include_shared: Optional[bool] = Field(None, alias='includeShared')
    snapshot_type: Optional[str] = Field(None, alias='snapshotType')
    resources_set: Optional[ResourcesSet] = Field(None, alias='resourcesSet')
    tag_set: Optional[TagSet] = Field(None, alias='tagSet')
    include: Optional[List[str]] = None
    pagination_token: Optional[str] = Field(None, alias='paginationToken')
    resources_per_page: Optional[int] = Field(None, alias='resourcesPerPage')
    resource_type_filters: Optional[List[str]] = Field(
        None, alias='resourceTypeFilters'
    )
    expression: Optional[str] = None
    new_instances_protected_from_scale_in: Optional[bool] = Field(
        None, alias='newInstancesProtectedFromScaleIn'
    )
    instance_type: Optional[str] = Field(None, alias='instanceType')
    delete_launch_template_request: Optional[DeleteLaunchTemplateRequest] = Field(
        None, alias='DeleteLaunchTemplateRequest'
    )
    create_launch_template_request: Optional[CreateLaunchTemplateRequest] = Field(
        None, alias='CreateLaunchTemplateRequest'
    )
    ownership_controls: Optional[str] = Field(None, alias='ownershipControls')
    anomaly_detector_types: Optional[List[str]] = Field(
        None, alias='anomalyDetectorTypes'
    )
    tag_filters: Optional[List[TagFilter]] = Field(None, alias='tagFilters')
    dashboard_body: Optional[str] = Field(None, alias='dashboardBody')
    describe_capacity_reservation_fleets_request: Optional[
        DescribeCapacityReservationFleetsRequest
    ] = Field(None, alias='DescribeCapacityReservationFleetsRequest')
    retention_in_days: Optional[int] = Field(None, alias='retentionInDays')
    kms_key_id: Optional[str] = Field(None, alias='kmsKeyId')
    log_group_class: Optional[str] = Field(None, alias='logGroupClass')
    lookup_attributes: Optional[List[LookupAttribute]] = Field(
        None, alias='lookupAttributes'
    )
    describe_vpc_endpoints_request: Optional[DescribeVpcEndpointsRequest] = Field(
        None, alias='DescribeVpcEndpointsRequest'
    )
    template: Optional[bool] = None
    trail_name_list: Optional[List] = Field(None, alias='trailNameList')
    include_shadow_trails: Optional[bool] = Field(None, alias='includeShadowTrails')
    intelligent_tiering: Optional[str] = Field(None, alias='intelligent-tiering')
    describe_network_insights_access_scopes_request: Optional[
        DescribeNetworkInsightsAccessScopesRequest
    ] = Field(None, alias='DescribeNetworkInsightsAccessScopesRequest')
    tags: Optional[Union[Tags, List[Tag2]]] = None
    server_side_encryption_configuration: Optional[
        ServerSideEncryptionConfiguration
    ] = Field(None, alias='ServerSideEncryptionConfiguration')
    content: Optional[str] = None
    tagging_1: Optional[Tagging1] = Field(None, alias='Tagging')
    describe_traffic_mirror_filters_request: Optional[
        DescribeTrafficMirrorFiltersRequest
    ] = Field(None, alias='DescribeTrafficMirrorFiltersRequest')
    describe_addresses_attribute_request: Optional[
        DescribeAddressesAttributeRequest
    ] = Field(None, alias='DescribeAddressesAttributeRequest')
    describe_nat_gateways_request: Optional[DescribeNatGatewaysRequest] = Field(
        None, alias='DescribeNatGatewaysRequest'
    )
    describe_address_transfers_request: Optional[
        DescribeAddressTransfersRequest
    ] = Field(None, alias='DescribeAddressTransfersRequest')
    describe_instance_type_offerings_request: Optional[
        DescribeInstanceTypeOfferingsRequest
    ] = Field(None, alias='DescribeInstanceTypeOfferingsRequest')
    all_availability_zones: Optional[bool] = Field(None, alias='allAvailabilityZones')
    force: Optional[bool] = None
    service_namespace: Optional[str] = Field(None, alias='serviceNamespace')


class Credentials(BaseModel):
    access_key_id: str = Field(..., alias='accessKeyId')
    session_token: str = Field(..., alias='sessionToken')
    expiration: str


class AssumedRoleUser(BaseModel):
    assumed_role_id: str = Field(..., alias='assumedRoleId')
    arn: str


class CurrentState(BaseModel):
    code: int
    name: str


class PreviousState(BaseModel):
    code: int
    name: str


class InstanceState(BaseModel):
    code: int
    name: str


class Operator(BaseModel):
    managed: bool


class Placement(BaseModel):
    availability_zone: str = Field(..., alias='availabilityZone')
    tenancy: str


class Monitoring1(BaseModel):
    state: str


class StateReason(BaseModel):
    code: str
    message: str


class TagSet2(BaseModel):
    items: List[Item18]


class Item21(BaseModel):
    group_id: str = Field(..., alias='groupId')
    group_name: str = Field(..., alias='groupName')


class GroupSet(BaseModel):
    items: List[Item21]


class GroupSet1(BaseModel):
    items: List[Item21]


class Attachment(BaseModel):
    attachment_id: str = Field(..., alias='attachmentId')
    device_index: int = Field(..., alias='deviceIndex')
    network_card_index: int = Field(..., alias='networkCardIndex')
    status: str
    attach_time: int = Field(..., alias='attachTime')
    delete_on_termination: bool = Field(..., alias='deleteOnTermination')


class ItemItem(BaseModel):
    private_ip_address: str = Field(..., alias='privateIpAddress')
    private_dns_name: str = Field(..., alias='privateDnsName')
    primary: bool


class PrivateIpAddressesSet(BaseModel):
    item: List[ItemItem]


class Item22(BaseModel):
    network_interface_id: str = Field(..., alias='networkInterfaceId')
    subnet_id: str = Field(..., alias='subnetId')
    vpc_id: str = Field(..., alias='vpcId')
    owner_id: str = Field(..., alias='ownerId')
    operator: Operator
    status: str
    mac_address: str = Field(..., alias='macAddress')
    private_ip_address: str = Field(..., alias='privateIpAddress')
    private_dns_name: str = Field(..., alias='privateDnsName')
    source_dest_check: bool = Field(..., alias='sourceDestCheck')
    interface_type: str = Field(..., alias='interfaceType')
    group_set: GroupSet1 = Field(..., alias='groupSet')
    attachment: Attachment
    private_ip_addresses_set: PrivateIpAddressesSet = Field(
        ..., alias='privateIpAddressesSet'
    )
    ipv6_addresses_set: Dict[str, Any] = Field(..., alias='ipv6AddressesSet')
    tag_set: Dict[str, Any] = Field(..., alias='tagSet')


class NetworkInterfaceSet1(BaseModel):
    items: List[Item22]


class IamInstanceProfile2(BaseModel):
    arn: str
    id: str


class CpuOptions(BaseModel):
    core_count: int = Field(..., alias='coreCount')
    threads_per_core: int = Field(..., alias='threadsPerCore')


class CapacityReservationSpecification(BaseModel):
    capacity_reservation_preference: str = Field(
        ..., alias='capacityReservationPreference'
    )


class EnclaveOptions(BaseModel):
    enabled: bool


class MetadataOptions(BaseModel):
    state: str
    http_tokens: str = Field(..., alias='httpTokens')
    http_put_response_hop_limit: int = Field(..., alias='httpPutResponseHopLimit')
    http_endpoint: str = Field(..., alias='httpEndpoint')
    http_protocol_ipv4: str = Field(..., alias='httpProtocolIpv4')
    http_protocol_ipv6: str = Field(..., alias='httpProtocolIpv6')
    instance_metadata_tags: str = Field(..., alias='instanceMetadataTags')


class MaintenanceOptions(BaseModel):
    auto_recovery: str = Field(..., alias='autoRecovery')


class PrivateDnsNameOptions(BaseModel):
    hostname_type: str = Field(..., alias='hostnameType')
    enable_resource_name_dns_a_record: bool = Field(
        ..., alias='enableResourceNameDnsARecord'
    )
    enable_resource_name_dns_aaaa_record: bool = Field(
        ..., alias='enableResourceNameDnsAAAARecord'
    )


class Item19(BaseModel):
    instance_id: str = Field(..., alias='instanceId')
    current_state: Optional[CurrentState] = Field(None, alias='currentState')
    previous_state: Optional[PreviousState] = Field(None, alias='previousState')
    image_id: Optional[str] = Field(None, alias='imageId')
    boot_mode: Optional[str] = Field(None, alias='bootMode')
    current_instance_boot_mode: Optional[str] = Field(
        None, alias='currentInstanceBootMode'
    )
    instance_state: Optional[InstanceState] = Field(None, alias='instanceState')
    private_dns_name: Optional[str] = Field(None, alias='privateDnsName')
    key_name: Optional[str] = Field(None, alias='keyName')
    operator: Optional[Operator] = None
    ami_launch_index: Optional[int] = Field(None, alias='amiLaunchIndex')
    product_codes: Optional[Dict[str, Any]] = Field(None, alias='productCodes')
    instance_type: Optional[str] = Field(None, alias='instanceType')
    launch_time: Optional[int] = Field(None, alias='launchTime')
    placement: Optional[Placement] = None
    monitoring: Optional[Monitoring1] = None
    subnet_id: Optional[str] = Field(None, alias='subnetId')
    vpc_id: Optional[str] = Field(None, alias='vpcId')
    private_ip_address: Optional[str] = Field(None, alias='privateIpAddress')
    state_reason: Optional[StateReason] = Field(None, alias='stateReason')
    architecture: Optional[str] = None
    root_device_type: Optional[str] = Field(None, alias='rootDeviceType')
    root_device_name: Optional[str] = Field(None, alias='rootDeviceName')
    block_device_mapping: Optional[Dict[str, Any]] = Field(
        None, alias='blockDeviceMapping'
    )
    virtualization_type: Optional[str] = Field(None, alias='virtualizationType')
    hypervisor: Optional[str] = None
    tag_set: Optional[TagSet2] = Field(None, alias='tagSet')
    client_token: Optional[str] = Field(None, alias='clientToken')
    group_set: Optional[GroupSet] = Field(None, alias='groupSet')
    source_dest_check: Optional[bool] = Field(None, alias='sourceDestCheck')
    network_interface_set: Optional[NetworkInterfaceSet1] = Field(
        None, alias='networkInterfaceSet'
    )
    iam_instance_profile: Optional[IamInstanceProfile2] = Field(
        None, alias='iamInstanceProfile'
    )
    ebs_optimized: Optional[bool] = Field(None, alias='ebsOptimized')
    ena_support: Optional[bool] = Field(None, alias='enaSupport')
    cpu_options: Optional[CpuOptions] = Field(None, alias='cpuOptions')
    capacity_reservation_specification: Optional[
        CapacityReservationSpecification
    ] = Field(None, alias='capacityReservationSpecification')
    enclave_options: Optional[EnclaveOptions] = Field(None, alias='enclaveOptions')
    metadata_options: Optional[MetadataOptions] = Field(None, alias='metadataOptions')
    maintenance_options: Optional[MaintenanceOptions] = Field(
        None, alias='maintenanceOptions'
    )
    private_dns_name_options: Optional[PrivateDnsNameOptions] = Field(
        None, alias='privateDnsNameOptions'
    )


class InstancesSet1(BaseModel):
    items: List[Item19]


class Target1(BaseModel):
    key: str
    values: List[str]


class NotificationConfig(BaseModel):
    notification_arn: str = Field(..., alias='notificationArn')
    notification_events: List = Field(..., alias='notificationEvents')
    notification_type: str = Field(..., alias='notificationType')


class AlarmConfiguration(BaseModel):
    ignore_poll_alarm_failure: bool = Field(..., alias='ignorePollAlarmFailure')
    alarms: List


class Command(BaseModel):
    command_id: str = Field(..., alias='commandId')
    document_name: str = Field(..., alias='documentName')
    document_version: str = Field(..., alias='documentVersion')
    comment: str
    expires_after: str = Field(..., alias='expiresAfter')
    parameters: str
    instance_ids: List[str] = Field(..., alias='instanceIds')
    targets: List[Target1]
    requested_date_time: str = Field(..., alias='requestedDateTime')
    status: str
    status_details: str = Field(..., alias='statusDetails')
    output_s3_region: str = Field(..., alias='outputS3Region')
    output_s3_bucket_name: str = Field(..., alias='outputS3BucketName')
    output_s3_key_prefix: str = Field(..., alias='outputS3KeyPrefix')
    max_concurrency: str = Field(..., alias='maxConcurrency')
    max_errors: str = Field(..., alias='maxErrors')
    target_count: int = Field(..., alias='targetCount')
    completed_count: int = Field(..., alias='completedCount')
    error_count: int = Field(..., alias='errorCount')
    delivery_timed_out_count: int = Field(..., alias='deliveryTimedOutCount')
    service_role: str = Field(..., alias='serviceRole')
    notification_config: NotificationConfig = Field(..., alias='notificationConfig')
    cloud_watch_output_config: CloudWatchOutputConfig = Field(
        ..., alias='cloudWatchOutputConfig'
    )
    interactive: bool
    timeout_seconds: int = Field(..., alias='timeoutSeconds')
    client_name: str = Field(..., alias='clientName')
    client_source_id: str = Field(..., alias='clientSourceId')
    alarm_configuration: AlarmConfiguration = Field(..., alias='alarmConfiguration')
    triggered_alarms: List = Field(..., alias='triggeredAlarms')
    has_send_command_signature: bool = Field(..., alias='hasSendCommandSignature')
    has_cancel_command_signature: bool = Field(..., alias='hasCancelCommandSignature')


class GroupSet2(BaseModel):
    group_id: str = Field(..., alias='groupId')


class Item24(BaseModel):
    network_card_index: int = Field(..., alias='networkCardIndex')
    associate_public_ip_address: bool = Field(..., alias='associatePublicIpAddress')
    delete_on_termination: bool = Field(..., alias='deleteOnTermination')
    device_index: int = Field(..., alias='deviceIndex')
    group_set: GroupSet2 = Field(..., alias='groupSet')


class NetworkInterfaceSet2(BaseModel):
    item: Item24


class Ebs2(BaseModel):
    volume_type: str = Field(..., alias='volumeType')
    encrypted: bool
    volume_size: int = Field(..., alias='volumeSize')


class Item25(BaseModel):
    ebs: Ebs2
    device_name: str = Field(..., alias='deviceName')


class BlockDeviceMappingSet(BaseModel):
    item: Item25


class IamInstanceProfile3(BaseModel):
    name: str


class LaunchTemplateData2(BaseModel):
    image_id: str = Field(..., alias='imageId')
    user_data: str = Field(..., alias='userData')
    network_interface_set: NetworkInterfaceSet2 = Field(
        ..., alias='networkInterfaceSet'
    )
    block_device_mapping_set: BlockDeviceMappingSet = Field(
        ..., alias='blockDeviceMappingSet'
    )
    instance_type: str = Field(..., alias='instanceType')
    key_name: str = Field(..., alias='keyName')
    iam_instance_profile: IamInstanceProfile3 = Field(..., alias='iamInstanceProfile')


class LaunchTemplateVersion1(BaseModel):
    create_time: str = Field(..., alias='createTime')
    created_by: str = Field(..., alias='createdBy')
    launch_template_id: str = Field(..., alias='launchTemplateId')
    launch_template_data: LaunchTemplateData2 = Field(..., alias='launchTemplateData')
    default_version: bool = Field(..., alias='defaultVersion')
    launch_template_name: str = Field(..., alias='launchTemplateName')
    operator: Operator
    version_number: int = Field(..., alias='versionNumber')


class CreateLaunchTemplateVersionResponse(BaseModel):
    xmlns: str
    request_id: str = Field(..., alias='requestId')
    launch_template_version: LaunchTemplateVersion1 = Field(
        ..., alias='launchTemplateVersion'
    )


class LaunchTemplate1(BaseModel):
    create_time: str = Field(..., alias='createTime')
    created_by: str = Field(..., alias='createdBy')
    launch_template_id: str = Field(..., alias='launchTemplateId')
    latest_version_number: int = Field(..., alias='latestVersionNumber')
    default_version_number: int = Field(..., alias='defaultVersionNumber')
    launch_template_name: str = Field(..., alias='launchTemplateName')
    operator: Operator


class DeleteLaunchTemplateResponse(BaseModel):
    xmlns: str
    request_id: str = Field(..., alias='requestId')
    launch_template: LaunchTemplate1 = Field(..., alias='launchTemplate')


class Item26(BaseModel):
    value: str
    key: str


class TagSet3(BaseModel):
    item: Item26


class LaunchTemplate2(BaseModel):
    tag_set: TagSet3 = Field(..., alias='tagSet')
    create_time: str = Field(..., alias='createTime')
    created_by: str = Field(..., alias='createdBy')
    launch_template_id: str = Field(..., alias='launchTemplateId')
    latest_version_number: int = Field(..., alias='latestVersionNumber')
    default_version_number: int = Field(..., alias='defaultVersionNumber')
    launch_template_name: str = Field(..., alias='launchTemplateName')
    operator: Operator


class CreateLaunchTemplateResponse(BaseModel):
    xmlns: str
    request_id: str = Field(..., alias='requestId')
    launch_template: LaunchTemplate2 = Field(..., alias='launchTemplate')


class Description(BaseModel):
    name: str
    default_version: str = Field(..., alias='defaultVersion')


class Tag4(BaseModel):
    key: str
    value: str


class DocumentDescription(BaseModel):
    hash: str
    hash_type: str = Field(..., alias='hashType')
    name: str
    owner: str
    created_date: str = Field(..., alias='createdDate')
    status: str
    document_version: str = Field(..., alias='documentVersion')
    platform_types: List[str] = Field(..., alias='platformTypes')
    document_type: str = Field(..., alias='documentType')
    schema_version: str = Field(..., alias='schemaVersion')
    latest_version: str = Field(..., alias='latestVersion')
    default_version: str = Field(..., alias='defaultVersion')
    document_format: str = Field(..., alias='documentFormat')
    tags: List[Tag4]
    document_id: str = Field(..., alias='documentId')


class ResponseElements(BaseModel):
    credentials: Optional[Credentials] = None
    assumed_role_user: Optional[AssumedRoleUser] = Field(None, alias='assumedRoleUser')
    query_id: Optional[str] = Field(None, alias='queryId')
    packed_policy_size: Optional[int] = Field(None, alias='packedPolicySize')
    key_id: Optional[str] = Field(None, alias='keyId')
    request_id: Optional[str] = Field(None, alias='requestId')
    instances_set: Optional[InstancesSet1] = Field(None, alias='instancesSet')
    command: Optional[Command] = None
    instance_id: Optional[str] = Field(None, alias='instanceId')
    reservation_id: Optional[str] = Field(None, alias='reservationId')
    owner_id: Optional[str] = Field(None, alias='ownerId')
    group_set: Optional[Dict[str, Any]] = Field(None, alias='groupSet')
    requester_id: Optional[str] = Field(None, alias='requesterId')
    grant_id: Optional[str] = Field(None, alias='grantId')
    instance_refresh_id: Optional[str] = Field(None, alias='instanceRefreshId')
    message_schema_version: Optional[str] = Field(None, alias='messageSchemaVersion')
    token_value: Optional[str] = Field(None, alias='tokenValue')
    session_id: Optional[str] = Field(None, alias='sessionId')
    stream_url: Optional[str] = Field(None, alias='streamUrl')
    anomaly_detector_arn: Optional[str] = Field(None, alias='anomalyDetectorArn')
    subject_from_web_identity_token: Optional[str] = Field(
        None, alias='subjectFromWebIdentityToken'
    )
    provider: Optional[str] = None
    audience: Optional[str] = None
    create_launch_template_version_response: Optional[
        CreateLaunchTemplateVersionResponse
    ] = Field(None, alias='CreateLaunchTemplateVersionResponse')
    version: Optional[int] = None
    tier: Optional[str] = None
    field_return: Optional[bool] = Field(None, alias='_return')
    delete_launch_template_response: Optional[DeleteLaunchTemplateResponse] = Field(
        None, alias='DeleteLaunchTemplateResponse'
    )
    create_launch_template_response: Optional[CreateLaunchTemplateResponse] = Field(
        None, alias='CreateLaunchTemplateResponse'
    )
    dashboard_validation_messages: Optional[List] = Field(
        None, alias='dashboardValidationMessages'
    )
    description: Optional[Description] = None
    document_description: Optional[DocumentDescription] = Field(
        None, alias='documentDescription'
    )
    console_login: Optional[str] = Field(None, alias='ConsoleLogin')


class TlsDetails(BaseModel):
    tls_version: Optional[str] = Field(None, alias='tlsVersion')
    cipher_suite: Optional[str] = Field(None, alias='cipherSuite')
    client_provided_host_header: str = Field(..., alias='clientProvidedHostHeader')


class Resource(BaseModel):
    account_id: Optional[str] = Field(None, alias='accountId')
    type: Optional[str] = None
    arn: Optional[str] = Field(None, alias='ARN')


class AdditionalEventData(BaseModel):
    signature_version: Optional[str] = Field(None, alias='SignatureVersion')
    cipher_suite: Optional[str] = Field(None, alias='CipherSuite')
    bytes_transferred_in: Optional[int] = Field(None, alias='bytesTransferredIn')
    authentication_method: Optional[str] = Field(None, alias='AuthenticationMethod')
    x_amz_id_2: Optional[str] = Field(None, alias='x-amz-id-2')
    bytes_transferred_out: Optional[int] = Field(None, alias='bytesTransferredOut')
    grant_id: Optional[str] = Field(None, alias='grantId')
    service: Optional[str] = None
    identity_provider_connection_verification_method: Optional[str] = Field(
        None, alias='identityProviderConnectionVerificationMethod'
    )
    login_to: Optional[str] = Field(None, alias='LoginTo')
    mobile_version: Optional[str] = Field(None, alias='MobileVersion')
    mfa_used: Optional[str] = Field(None, alias='MFAUsed')


class ServiceEventDetails(BaseModel):
    document_name: str = Field(..., alias='DocumentName')
    is_kms_encryption_enabled: bool = Field(..., alias='IsKmsEncryptionEnabled')
    is_s3_encryption_enabled: bool = Field(..., alias='IsS3EncryptionEnabled')
    is_cloud_watch_encryption_enabled: bool = Field(
        ..., alias='IsCloudWatchEncryptionEnabled'
    )
    idle_session_timeout: str = Field(..., alias='IdleSessionTimeout')
    max_session_duration: str = Field(..., alias='MaxSessionDuration')


class ModelItem(BaseModel):
    event_version: str = Field(..., alias='eventVersion')
    user_identity: UserIdentity = Field(..., alias='userIdentity')
    event_time: str = Field(..., alias='eventTime')
    event_source: str = Field(..., alias='eventSource')
    event_name: str = Field(..., alias='eventName')
    aws_region: str = Field(..., alias='awsRegion')
    source_ip_address: str = Field(..., alias='sourceIPAddress')
    user_agent: str = Field(..., alias='userAgent')
    request_parameters: Optional[RequestParameters] = Field(
        ..., alias='requestParameters'
    )
    response_elements: Optional[ResponseElements] = Field(..., alias='responseElements')
    request_id: Optional[str] = Field(None, alias='requestID')
    event_id: str = Field(..., alias='eventID')
    read_only: bool = Field(..., alias='readOnly')
    event_type: str = Field(..., alias='eventType')
    management_event: bool = Field(..., alias='managementEvent')
    recipient_account_id: str = Field(..., alias='recipientAccountId')
    event_category: str = Field(..., alias='eventCategory')
    tls_details: Optional[TlsDetails] = Field(None, alias='tlsDetails')
    error_code: Optional[str] = Field(None, alias='errorCode')
    error_message: Optional[str] = Field(None, alias='errorMessage')
    resources: Optional[List[Resource]] = None
    shared_event_id: Optional[str] = Field(None, alias='sharedEventID')
    session_credential_from_console: Optional[str] = Field(
        None, alias='sessionCredentialFromConsole'
    )
    api_version: Optional[str] = Field(None, alias='apiVersion')
    additional_event_data: Optional[AdditionalEventData] = Field(
        None, alias='additionalEventData'
    )
    vpc_endpoint_id: Optional[str] = Field(None, alias='vpcEndpointId')
    vpc_endpoint_account_id: Optional[str] = Field(None, alias='vpcEndpointAccountId')
    service_event_details: Optional[ServiceEventDetails] = Field(
        None, alias='serviceEventDetails'
    )


class Model(RootModel[List[ModelItem]]):
    root: List[ModelItem]
